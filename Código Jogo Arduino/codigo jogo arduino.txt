#include <Adafruit_GFX.h>    // Core graphics library
#include <Adafruit_ST7789.h> // Hardware-specific library for ST7789
#include <SPI.h>             // Arduino SPI library
#include <Fonts/FreeSansBold12pt7b.h>
#include <string.h>
 
// ST7789 TFT module connections
#define TFT_CS     10
#define TFT_RST    8  // define reset pin, or set to -1 and connect to Arduino RESET pin
#define TFT_DC     9  // define data/command pin
 
// Initialize Adafruit ST7789 TFT library
Adafruit_ST7789 tft = Adafruit_ST7789(TFT_CS, TFT_DC, TFT_RST);

#define logo_w 240
#define logo_h 240
const unsigned char  logo_bit[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x03, 0x80, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 
  0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x1f, 0x00, 0x1f, 
  0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x11, 0x80, 0x31, 0x02, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x1e, 0xc0, 0x6f, 0x03, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x03, 0xe0, 0xf8, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0xc0, 0x60, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x21, 0xf0, 0x00, 0x01, 0xf1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x21, 0xfc, 0x00, 0x07, 0xf1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xff, 
  0x80, 0x3f, 0xf1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0xff, 0xc0, 0x7f, 
  0xf1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0xff, 0xc0, 0x7f, 0xe1, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0xff, 0xc0, 0x7f, 0xe1, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x3f, 0xe0, 0xff, 0x83, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x04, 0x07, 0xe0, 0xfc, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 
  0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0a, 0x00, 
  0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x1b, 0x80, 0x0c, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x20, 0x80, 0x08, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x60, 0x7f, 0xc0, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 
  0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x1f, 0xf0, 
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0x80, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x07, 0xff, 0xc0, 0x07, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x0f, 0xfe, 0x00, 0x00, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf0, 
  0x00, 0x07, 0xdf, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xc0, 0x00, 0x0c, 
  0x67, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x08, 0x19, 0xfe, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xe0, 0x00, 0x08, 0x0e, 0xff, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf8, 0x1e, 0x00, 0x0c, 0x03, 0xbf, 0x80, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x07, 0xf0, 0x01, 0x80, 0x06, 0x00, 0x9f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xc0, 0x00, 0xc0, 0x02, 0x00, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xc0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xc0, 0x00, 0x60, 0x01, 0x00, 0x43, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xc0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 
  0x30, 0xf9, 0xc0, 0x43, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 
  0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x18, 0x8e, 
  0x70, 0x43, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x7f, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x08, 0x82, 0x18, 0x23, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x7c, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x1f, 0x00, 0x08, 0x83, 0x08, 0x20, 0xf8, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xf1, 0xc0, 0x08, 0x61, 0x04, 0x20, 0xfc, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x7c, 0x00, 0x78, 0x08, 0x3d, 0xc6, 0x20, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x7c, 0x00, 0x0f, 0x0c, 0x07, 0xe2, 0x10, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x07, 0xc0, 0x7d, 0xfc, 0x7c, 0xe7, 0xe0, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 
  0x00, 0x01, 0x86, 0x00, 0x43, 0x18, 0x7e, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x80, 
  0x07, 0xc0, 0x7c, 0x7e, 0x19, 0xe3, 0xc0, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 
  0xc3, 0x00, 0x01, 0x08, 0x3e, 0x00, 0x00, 0xfc, 0x02, 0x04, 0x00, 0x00, 0x07, 0x80, 0x07, 0xc0, 
  0x7c, 0x7f, 0x10, 0xe3, 0xe0, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x0f, 0x00, 0x61, 0x80, 
  0x01, 0x08, 0x3e, 0x00, 0x00, 0xfc, 0x06, 0x0c, 0x00, 0x00, 0x07, 0x80, 0x07, 0xc0, 0x7c, 0x5f, 
  0x80, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x19, 0xe0, 0x30, 0x60, 0x00, 0x88, 
  0x3e, 0x00, 0x00, 0x7c, 0x0e, 0x1c, 0x00, 0x00, 0x07, 0xc0, 0x07, 0xc0, 0x7c, 0x5f, 0x83, 0xf3, 
  0xfe, 0x7e, 0xff, 0xbf, 0xf8, 0xf0, 0x01, 0xf0, 0x10, 0x3c, 0x10, 0x38, 0x00, 0x84, 0x1f, 0x00, 
  0x00, 0x7e, 0x3f, 0x7e, 0x3f, 0x03, 0xc7, 0x8e, 0x07, 0xc0, 0x7c, 0x4f, 0xc1, 0xf3, 0xef, 0x3e, 
  0x7d, 0xdf, 0x79, 0xc4, 0x01, 0xf0, 0x30, 0x06, 0x08, 0x0e, 0x00, 0xc4, 0x1f, 0x00, 0x00, 0x3e, 
  0x1e, 0x3c, 0x73, 0xcf, 0x67, 0xc0, 0x07, 0xc0, 0x7c, 0x47, 0xe1, 0xf3, 0xcf, 0x3e, 0x79, 0x9e, 
  0x79, 0xe0, 0x01, 0xf0, 0x20, 0x03, 0x0c, 0x03, 0xc0, 0x44, 0x1f, 0x00, 0x00, 0x3e, 0x1e, 0x3c, 
  0x33, 0xcf, 0xe7, 0x9c, 0x07, 0xc0, 0x7c, 0x43, 0xf1, 0xf3, 0xef, 0x3e, 0x78, 0x1e, 0x79, 0xf8, 
  0x01, 0xf0, 0x20, 0x01, 0x00, 0x00, 0x60, 0x46, 0x1f, 0x00, 0x00, 0x3f, 0x1e, 0x3c, 0x03, 0xcf, 
  0x67, 0xfc, 0x07, 0xc0, 0x7c, 0x43, 0xf1, 0xf3, 0xef, 0x3e, 0x78, 0x1f, 0x78, 0xfc, 0x01, 0xf0, 
  0x20, 0x01, 0x80, 0x00, 0x30, 0x42, 0x1f, 0x00, 0x03, 0xff, 0x1e, 0x3c, 0x7f, 0xcf, 0x07, 0xfe, 
  0x07, 0xc0, 0x7c, 0x41, 0xf1, 0xf3, 0xcf, 0x3e, 0x78, 0x1e, 0x78, 0x3e, 0x01, 0xf0, 0x20, 0x00, 
  0xe0, 0x00, 0x18, 0x43, 0x1f, 0x00, 0x04, 0x1f, 0x9e, 0x3c, 0xf3, 0xcf, 0x07, 0xdf, 0x07, 0xc0, 
  0x7c, 0x60, 0xf1, 0xf3, 0xef, 0x3e, 0x78, 0x1f, 0xf9, 0x0e, 0x01, 0xf0, 0x20, 0x00, 0x1e, 0x00, 
  0x0c, 0x41, 0x1f, 0x00, 0x0c, 0x1f, 0x9e, 0x3c, 0xf3, 0xcf, 0x27, 0x8f, 0x07, 0xc0, 0x7d, 0xf0, 
  0x73, 0xff, 0xde, 0x7f, 0xfe, 0x0f, 0x7c, 0x78, 0x01, 0xf0, 0x20, 0x00, 0x03, 0xc0, 0x04, 0x41, 
  0x9f, 0x00, 0x1f, 0x3f, 0xce, 0x1c, 0x7b, 0xe3, 0xcf, 0xff, 0x87, 0xc0, 0x7c, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x20, 0x7f, 0xf0, 0x78, 0x06, 0x40, 0xdf, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x20, 0xc0, 0x18, 0x0c, 0x02, 0x40, 0x7e, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xf8, 0x31, 0x80, 0x0c, 0x04, 0x02, 0x40, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0xf8, 0x11, 0x00, 0x02, 0x06, 0x02, 0x40, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x07, 0xc0, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 
  0x11, 0x00, 0x02, 0x02, 0x02, 0x40, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x07, 0xc0, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x11, 0x00, 
  0x02, 0x63, 0x02, 0x40, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 
  0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x11, 0x80, 0x02, 0x39, 
  0x82, 0x40, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x7f, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x10, 0xc1, 0xc2, 0x0c, 0x82, 0x40, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x7f, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x18, 0x60, 0x22, 0x04, 0xc2, 0x40, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0c, 0x30, 0x22, 0x04, 0x42, 0x41, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0x87, 0x10, 0x22, 0x04, 0x42, 0x41, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x80, 0xc8, 0x22, 0x04, 0x42, 0x47, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 
  0xc0, 0x48, 0x32, 0x00, 0x43, 0x47, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xe0, 0x44, 
  0x12, 0x00, 0x41, 0x4f, 0xec, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf0, 0x26, 0x1a, 0x00, 
  0x43, 0x5f, 0xc6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0xf8, 0x23, 0x0b, 0x00, 0x4e, 0x3f, 
  0x83, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0xfe, 0x21, 0x09, 0xc0, 0x78, 0x7f, 0x01, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0xff, 0x30, 0xc4, 0x7f, 0xc1, 0xfe, 0x01, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x20, 0x7f, 0xd8, 0x46, 0x00, 0x07, 0xfc, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x60, 0x3f, 0xfe, 0x43, 0x00, 0x1f, 0xff, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 
  0x0f, 0xff, 0xc0, 0x00, 0x7f, 0xe1, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x07, 0xff, 
  0xc0, 0x07, 0xff, 0xc0, 0xc0, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0xff, 0xff, 0xff, 
  0xff, 0x00, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x7f, 0xff, 0xff, 0xfc, 0x00, 
  0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x06, 0x1f, 0xff, 0xff, 0xf0, 0x00, 0x30, 0x10, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x0c, 0x03, 0xff, 0xff, 0x80, 0x00, 0x10, 0x18, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x18, 0x00, 0x18, 0x00, 0x3f, 0xff, 0x00, 0x00, 0x18, 0x0c, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x30, 0x00, 0x10, 0x00, 0x08, 0x01, 0x80, 0x00, 0x08, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x61, 0xc0, 
  0x70, 0x00, 0x18, 0x00, 0xc0, 0x00, 0x08, 0x79, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc2, 0x40, 0xc0, 0x00, 
  0x10, 0x00, 0x20, 0x03, 0x8c, 0x84, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x84, 0x21, 0x87, 0x80, 0x30, 0x00, 
  0x30, 0x04, 0x46, 0x84, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x04, 0x23, 0x08, 0x40, 0x20, 0x00, 0x18, 0x08, 
  0x22, 0xc4, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x06, 0x46, 0x08, 0x40, 0x20, 0x38, 0x0e, 0x08, 0x23, 0x39, 
  0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x1f, 0x81, 0x8c, 0x0c, 0x40, 0x60, 0x48, 0x03, 0x08, 0x21, 0x03, 0xfe, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x1f, 0xf8, 0x18, 0x03, 0x80, 0x40, 0x84, 0x01, 0xc4, 0x41, 0x0f, 0xfe, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 
  0xff, 0xf0, 0x00, 0x00, 0xc0, 0x84, 0x00, 0x63, 0x81, 0x3f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 
  0xe0, 0x00, 0x80, 0xc8, 0x00, 0x20, 0x03, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0x80, 
  0x80, 0x30, 0x00, 0x20, 0x1f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0x00, 0x00, 
  0x00, 0x33, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x20, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x60, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x0f, 0xff, 0x01, 0xff, 0xf0, 0x40, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x00, 0x0f, 
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

#define nave_w 40
#define nave_h 40
const unsigned char  nave_bit[] PROGMEM = {
  0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 
  0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 
  0x18, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x01, 0xff, 0x80, 0x00, 0x00, 0x01, 0xff, 
  0xc0, 0x00, 0x00, 0x03, 0xff, 0xc0, 0x00, 0x00, 0x07, 0xff, 0xe0, 0x00, 0x00, 0x07, 0xff, 0xe0, 
  0x00, 0x00, 0x07, 0xff, 0xe0, 0x00, 0x00, 0x07, 0xff, 0xe0, 0x00, 0x00, 0x07, 0xff, 0xe0, 0x00, 
  0x00, 0x07, 0xff, 0xe0, 0x00, 0x00, 0x07, 0xff, 0xe0, 0x00, 0x00, 0x0f, 0xff, 0xe0, 0x00, 0x06, 
  0x3f, 0xff, 0xfc, 0xe0, 0x06, 0x3f, 0xff, 0xfc, 0xe0, 0x07, 0x3f, 0xff, 0xff, 0xe0, 0x07, 0xff, 
  0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 
  0xff, 0xe0, 0x07, 0xff, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0xff, 
  0xe0, 0x07, 0xff, 0xff, 0xff, 0xe0, 0x07, 0xff, 0xff, 0xff, 0xe0, 0x07, 0xf8, 0x00, 0x1f, 0xe0, 
  0x07, 0xf0, 0x00, 0x0f, 0xe0, 0x07, 0xf8, 0x00, 0x0f, 0xc0, 0x07, 0x01, 0xff, 0xc3, 0xc0, 0x07, 
  0x01, 0xff, 0x81, 0xc0, 0x06, 0x00, 0x3e, 0x00, 0xc0, 0x06, 0x00, 0x00, 0x00, 0xe0, 0x06, 0x00, 
  0x00, 0x00, 0xe0, 0x06, 0x00, 0x00, 0x00, 0xe0
};

#define inimigo_w 40
#define inimigo_h 40
const unsigned char  inimigo_bit[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x01, 
  0xe0, 0x00, 0x1e, 0x00, 0x07, 0xe0, 0x00, 0x1f, 0x00, 0x0f, 0xe0, 0x00, 0x0f, 0x80, 0x1f, 0xc0, 
  0x00, 0x0f, 0xc0, 0x3f, 0x00, 0x00, 0x07, 0xe0, 0x7e, 0x00, 0x00, 0x03, 0xf8, 0x7c, 0x00, 0x00, 
  0x01, 0xfc, 0x78, 0x00, 0x10, 0x00, 0xfc, 0x78, 0x01, 0xff, 0x00, 0x7c, 0x3c, 0x03, 0xff, 0xc0, 
  0x3e, 0x38, 0x0f, 0xff, 0xe0, 0x3e, 0x38, 0x0f, 0xb9, 0xf0, 0x3e, 0x78, 0x1f, 0x7d, 0xf8, 0x3c, 
  0x78, 0x3e, 0x7e, 0xf8, 0x3c, 0x78, 0x3e, 0xff, 0x7c, 0x3c, 0x7c, 0x79, 0xef, 0x3e, 0x7c, 0x7f, 
  0xff, 0xc7, 0xbf, 0xfc, 0x7f, 0xff, 0xff, 0xff, 0xfc, 0x7f, 0xff, 0xff, 0xff, 0xfc, 0x7f, 0xff, 
  0xdf, 0xff, 0xfc, 0x78, 0x7d, 0xef, 0xbf, 0xfc, 0x78, 0x3c, 0xff, 0x7c, 0x3c, 0x78, 0x3e, 0x7c, 
  0xfc, 0x3c, 0x78, 0x3f, 0x3d, 0xf8, 0x3c, 0x78, 0x1f, 0xbb, 0xf0, 0x3c, 0x78, 0x0f, 0xff, 0xf0, 
  0x3c, 0x78, 0x07, 0xff, 0xe0, 0x7c, 0x7c, 0x03, 0xff, 0x80, 0xfc, 0x3e, 0x00, 0xfe, 0x01, 0xf8, 
  0x3f, 0x80, 0x00, 0x07, 0xf8, 0x1f, 0xc0, 0x00, 0x0f, 0xe0, 0x07, 0xe0, 0x00, 0x1f, 0xc0, 0x03, 
  0xf0, 0x00, 0x3f, 0x00, 0x01, 0xe0, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

#define chefe_w 50
#define chefe_h 50
const unsigned char chefe_bit [] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0xff, 0x3f, 0xe0, 0x00, 0x00, 0x00, 0x03, 0xfc, 0x7f, 0xf0, 0x00, 0x00, 0x00, 0x0f, 0xf9, 0xff, 
  0xfe, 0x00, 0x00, 0x00, 0x3f, 0xef, 0xfe, 0xff, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xf3, 0xff, 0x80, 
  0x00, 0x00, 0xff, 0xff, 0x87, 0xff, 0xc0, 0x00, 0x01, 0xff, 0xfe, 0x1f, 0xff, 0xe0, 0x00, 0x03, 
  0xff, 0xfc, 0xfe, 0x7f, 0xf0, 0x00, 0x07, 0xff, 0xff, 0xf1, 0xff, 0xf8, 0x00, 0x0f, 0xff, 0xff, 
  0x0f, 0xff, 0xfc, 0x00, 0x0f, 0xff, 0xf8, 0x7f, 0xff, 0xfc, 0x00, 0x1f, 0xff, 0xe1, 0xff, 0xff, 
  0xfe, 0x00, 0x1f, 0xff, 0xcf, 0xff, 0xff, 0xfe, 0x00, 0x3f, 0xff, 0xff, 0xfc, 0x63, 0xff, 0x00, 
  0x3f, 0xff, 0xff, 0xf3, 0x0f, 0xff, 0x00, 0x7f, 0xff, 0xff, 0xc0, 0x3f, 0xff, 0x80, 0x7f, 0xff, 
  0xff, 0x80, 0xff, 0xff, 0x80, 0x7f, 0xff, 0xfc, 0x07, 0xff, 0xff, 0x80, 0x7f, 0xff, 0xf0, 0x7f, 
  0xff, 0xff, 0x80, 0x7f, 0xff, 0x03, 0xff, 0xff, 0xff, 0x80, 0xff, 0xfc, 0x1f, 0xff, 0x91, 0xff, 
  0x80, 0xff, 0xf0, 0xff, 0xfc, 0x0f, 0xff, 0x80, 0xff, 0xcf, 0xff, 0xc0, 0x7f, 0xf8, 0x80, 0xff, 
  0xff, 0xfe, 0x07, 0xff, 0x87, 0xc0, 0xff, 0xff, 0xf0, 0x7f, 0xfc, 0x7f, 0x80, 0xff, 0xff, 0x07, 
  0xff, 0xc7, 0xff, 0x80, 0x7f, 0xfc, 0x3f, 0xfc, 0x7f, 0xff, 0x80, 0x7f, 0xff, 0xff, 0xc3, 0xff, 
  0xff, 0x80, 0x7f, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0x80, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 
  0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x3f, 0xff, 0xff, 0xfe, 0x1f, 0xff, 0x00, 0x3f, 0xff, 
  0xff, 0xe0, 0xfc, 0xff, 0x00, 0x1f, 0xff, 0xff, 0x07, 0xc7, 0xfe, 0x00, 0x1f, 0xff, 0xf8, 0xff, 
  0x3f, 0xfe, 0x00, 0x0f, 0xff, 0xff, 0xfc, 0x7f, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xf3, 0xff, 0xfc, 
  0x00, 0x07, 0xff, 0xff, 0xdf, 0xff, 0xf8, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x03, 
  0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0xff, 0xff, 
  0xff, 0xff, 0xc0, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xfe, 
  0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xe0, 0x00, 0x00, 
  0x00, 0x00, 0x7f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf8, 0x00, 0x00, 0x00
};

typedef struct
{
  char nome[4];
  int pontos;
} rank;

typedef struct
{
  int pos_x, pos_y, tpos_x, tpos_y;
  int vidas;
  bool tiro;
  rank ID;
  
} player;

typedef struct
{
  int pos_x, pos_y, vidas, vel, tpos_x, tpos_y, tvel, cor;
  bool exist;
  bool tiro;
  
} enemy;

player jogador = {tft.width()/2 -20, 190, 0, 190,
                  3,
                  0,
                  {"\0", 0}
                 };
                 
rank players[3] = {{"\0", 0},
                   {"\0", 0},
                   {"\0", 0}};

int drawMenu();
void drawSubJogar();
void Inserir();
int Jogo();
void drawRanking();
void Organizar();
void drawCreditos();
void drawSair();

bool norank;
 
void setup(void) {
  pinMode(2, INPUT_PULLUP);	//Botão para cima/esquerda
  pinMode(3, INPUT_PULLUP);	//Botão para baixo/direita
  pinMode(4, INPUT_PULLUP);	//Botão para confirmar/atirar
  pinMode(5, INPUT_PULLUP);	//Botão para voltar
 
  tft.init(240, 240, SPI_MODE2);    // Init ST7789 display 240x240 pixel
  tft.setRotation(2);
  
  tft.fillScreen(ST77XX_BLACK);

  tft.drawBitmap(0, 0, logo_bit, logo_w, logo_h, ST77XX_GREEN);
  delay(5000);
  tft.fillScreen(ST77XX_BLACK);
}
 
void loop() {
  switch(drawMenu())
  {
    case 76:
      Organizar();
      drawSubJogar();
      break;
         
    case 102:
      Organizar();
      drawRanking();
      break;
        
    case 128:
      drawCreditos();
      break;

    case 154:
      drawSair();
      break;

    default:
      break;
  }
}

int drawMenu()
{
  int pos_y = 76;
  
  do
  {
    tft.setTextWrap(false);   //Nao vai ter quebra de linha
    tft.drawRect(1, 1, tft.width()-2, tft.height()-2, ST77XX_WHITE);  //Faz a borda em branco com 1 pixel de distancia da beirada do display
    tft.setCursor(36, 35);  //Determina a posição do cursor
    tft.setTextColor(ST77XX_GREEN);
    tft.setTextSize(1); //Tamanho da fonte
    tft.setFont(&FreeSansBold12pt7b);   //22p altura
    tft.println("Nibirus Attack");
    tft.setFont(NULL);  //Retorna para a fonte padrão
    tft.setTextSize(2);
    tft.setCursor(36, 76);
    tft.print("Jogar");
    tft.setCursor(36, 102);
    tft.print("Ranking");
    tft.setCursor(36, 128);
    tft.print("Creditos");
    tft.setCursor(36, 154);
    tft.print("Sair");
  
    if(!digitalRead(3))
    {
      if(pos_y < 154)
      {
        pos_y += 26;
      }
      delay(50);
    }
  
    if(!digitalRead(2))
    {
      if(pos_y > 76)
      {
        pos_y -= 26;
      }
      delay(50);
    }
  
    switch(pos_y)
    {
      case 76:
        tft.setCursor(20, pos_y);
        tft.print(">");
        tft.setTextColor(ST77XX_BLACK);
        tft.setCursor(20, 102);
        tft.print(">");
        tft.setCursor(20, 128);
        tft.print(">");
        tft.setCursor(20, 154);
        tft.print(">");
        tft.setTextColor(ST77XX_GREEN);
        break;
      
      case 102:
        tft.setCursor(20, pos_y);
        tft.print(">");
        tft.setTextColor(ST77XX_BLACK);
        tft.setCursor(20, 76);
        tft.print(">");
        tft.setCursor(20, 128);
        tft.print(">");
        tft.setCursor(20, 154);
        tft.print(">");
        tft.setTextColor(ST77XX_GREEN);
        break;
      
      case 128:
        tft.setCursor(20, pos_y);
        tft.print(">");
        tft.setTextColor(ST77XX_BLACK);
        tft.setCursor(20, 102);
        tft.print(">");
        tft.setCursor(20, 76);
        tft.print(">");
        tft.setCursor(20, 154);
        tft.print(">");
        tft.setTextColor(ST77XX_GREEN);
        break;
  
      case 154:
        tft.setCursor(20, pos_y);
        tft.print(">");
        tft.setTextColor(ST77XX_BLACK);
        tft.setCursor(20, 102);
        tft.print(">");
        tft.setCursor(20, 128);
        tft.print(">");
        tft.setCursor(20, 76);
        tft.print(">");
        tft.setTextColor(ST77XX_GREEN);
        break;
    }
    
    if(!digitalRead(4))
    {
      tft.fillScreen(ST77XX_BLACK);
      return pos_y;
    }
  } while(1);
}

void drawSubJogar()
{
  tft.setTextColor(ST77XX_BLUE);
  int jogo = 0;
  tft.drawRect(1, 1, tft.width()-2, tft.height()-2, ST77XX_WHITE);
  int i, x, y=80, selec=80;
  do
  {
    if(jogo == 0)
    {
      tft.drawRect(1, 1, tft.width()-2, tft.height()-2, ST77XX_WHITE);
      tft.setCursor(15, 40);
      tft.print("Selecionar jogador");
      for(i=0; i<3; i++)
      {
        x = 50;
        tft.setCursor(x, y);
        tft.print(players[i].nome);
        x += 90;
        tft.setCursor(x, y);
        tft.print(players[i].pontos);
        y += 31;
      }
      tft.setCursor(30, y);
      tft.print("Criar novo");
      y = 80;
      
      if(!digitalRead(3))
      {
        if(selec < 173)
        {
          selec += 31;
        }
        delay(150);
      }
        
      if(!digitalRead(2))
      {
        if(selec > 80)
        {
          selec -= 31;
          }
        delay(150);
      }
      
      switch(selec)
      {
        case 80:
          tft.setCursor(34, selec);
          tft.print(">");
          strcpy(jogador.ID.nome, players[0].nome);
          norank = 1;
          tft.setTextColor(ST77XX_BLACK);
          tft.setCursor(34, 111);
          tft.print(">");
          tft.setCursor(34, 142);
          tft.print(">");
          tft.setCursor(14, 173);
          tft.print(">");
          tft.setTextColor(ST77XX_BLUE);
          break;
        
        case 111:
          tft.setCursor(34, selec);
          tft.print(">");
          strcpy(jogador.ID.nome, players[1].nome);
          norank = 1;
          tft.setTextColor(ST77XX_BLACK);
          tft.setCursor(34, 80);
          tft.print(">");
          tft.setCursor(34, 142);
          tft.print(">");
          tft.setCursor(14, 173);
          tft.print(">");
          tft.setTextColor(ST77XX_BLUE);
          break;
        
        case 142:
          tft.setCursor(34, selec);
          tft.print(">");
          strcpy(jogador.ID.nome, players[2].nome);
          norank = 1;
          tft.setTextColor(ST77XX_BLACK);
          tft.setCursor(34, 80);
          tft.print(">");
          tft.setCursor(34, 111);
          tft.print(">");
          tft.setCursor(14, 173);
          tft.print(">");
          tft.setTextColor(ST77XX_BLUE);
          break;
    
        case 173:
          tft.setCursor(14, selec);
          tft.print(">");
          norank = 0;
          tft.setTextColor(ST77XX_BLACK);
          tft.setCursor(34, 80);
          tft.print(">");
          tft.setCursor(34, 111);
          tft.print(">");
          tft.setCursor(34, 142);
          tft.print(">");
          tft.setTextColor(ST77XX_BLUE);
          break;
      }
    }
    else if(jogo == 1)
    {
      switch(Jogo())
      {
        case 0:
          tft.fillScreen(ST77XX_BLACK);
          tft.setTextColor(ST77XX_RED);
          tft.drawRect(1, 1, tft.width()-2, tft.height()-2, ST77XX_WHITE);
          tft.setTextSize(2);
          tft.setCursor(10, tft.height()/2);
          tft.print("Derrota");
          delay(3000);
          tft.setTextColor(ST77XX_BLUE);
          
          jogador.pos_x = tft.width()/2 -20;
          jogador.pos_y = 190;
          jogador.tpos_x = 0;
          jogador.tpos_y = 190;
          jogador.vidas = 3;
          jogador.tiro = 0;
          jogador.ID.pontos = 0;
          
          jogo = 0;
          tft.fillScreen(ST77XX_BLACK);
          break;

        case 1:
          tft.fillScreen(ST77XX_BLACK);
          tft.setTextColor(ST77XX_BLUE);
          tft.drawRect(1, 1, tft.width()-2, tft.height()-2, ST77XX_WHITE);
          tft.setTextSize(2);
          tft.setCursor(10, tft.height()/2);
          tft.print("Vitoria");
          delay(3000);

          jogador.pos_x = tft.width()/2 -20;
          jogador.pos_y = 190;
          jogador.tpos_x = 0;
          jogador.tpos_y = 190;
          jogador.vidas = 3;
          jogador.tiro = 0;
          jogador.ID.pontos = 0;
          
          jogo = 0;
          tft.fillScreen(ST77XX_BLACK);
          break;

        default:
          tft.fillScreen(ST77XX_BLACK);
          jogador.pos_x = tft.width()/2 -20;
          jogador.pos_y = 190;
          jogador.tpos_x = 0;
          jogador.tpos_y = 190;
          jogador.vidas = 3;
          jogador.tiro = 0;
          jogador.ID.pontos = 0;

          jogo = 0;
          break;
      }
    }
    else
    {
      tft.fillScreen(ST77XX_BLACK);
      tft.setTextSize(3);
      tft.drawRect(1, 1, tft.width()-2, tft.height()-2, ST77XX_WHITE);
      tft.setCursor(30, tft.height()/4);
      tft.print("Nome");
      
      char letra[3];
      for(i=0; i<3; i++)
      {
        letra[i] = 65;
      }

      int j = 0;
      x = 50;
      unsigned long tempo = millis()/1000;
      do
      {
        tft.setTextColor(ST77XX_BLUE);
        for(i=0; i<3; i++)
        {
          int x1 = i*60 + 50;
          tft.setCursor(x1, tft.height()/2);
          tft.print(letra[i]);
        }
        if((millis()/1000 - tempo)%2)
        {
          tft.setTextColor(ST77XX_BLACK);
          tft.setCursor(x, tft.height()/2+10);
          tft.print("_");
        }
        else
        {
          tft.setTextColor(ST77XX_BLUE);
          tft.setCursor(x, tft.height()/2+10);
          tft.print("_");
        }

        if(!digitalRead(3))
        {
          if(letra[j]<90)
          {
            tft.setTextColor(ST77XX_BLACK);
            tft.setCursor(x, tft.height()/2);
            tft.print(letra[j]);
            tft.setTextColor(ST77XX_BLUE);
            letra[j]++;
            delay(150);
          }
        }
      
        if(!digitalRead(2))
        {
          if(letra[j]>65)
          {
            tft.setTextColor(ST77XX_BLACK);
            tft.setCursor(x, tft.height()/2);
            tft.print(letra[j]);
            tft.setTextColor(ST77XX_BLUE);
            letra[j]--;
            delay(150);
          }
        }

        if(!digitalRead(4))
        {
          if(j<2)
          {
            tft.setTextColor(ST77XX_BLACK);
            tft.setCursor(x, tft.height()/2+10);
            tft.print("_");
            tft.setTextColor(ST77XX_BLUE);
            x += 60;
            j++;
          }
          else
          {
            break;
          }
          delay(200);
        }

        if(!digitalRead(5))
        {
          tft.fillScreen(ST77XX_BLACK);
          return;
        }
      }while(1);

      for(i = 0; i<3; i++)
      {
        jogador.ID.nome[i] = letra[i];
      }

      for(i = 0; i<3; i++)
      {
        if(!strcmp(jogador.ID.nome, players[i].nome))
        {
          tft.fillScreen(ST77XX_BLACK);
          tft.setTextColor(ST77XX_BLUE);
          tft.drawRect(1, 1, tft.width()-2, tft.height()-2, ST77XX_WHITE);
          tft.setTextSize(2);
          tft.setCursor(15, tft.height()/2);
          tft.print("Nome ja registrado");
          delay(1000);
          jogo = 0;
          tft.fillScreen(ST77XX_BLACK);
          break;
        }
      }
      if(jogo == 0)
        break;

      tft.fillScreen(ST77XX_BLACK);
      tft.setTextColor(ST77XX_BLUE);
      tft.drawRect(1, 1, tft.width()-2, tft.height()-2, ST77XX_WHITE);
      tft.setTextSize(2);
      tft.setCursor(10, tft.height()/2);
      tft.print("Jogador adicionado!");
      delay(2000);
      jogo = 1;
      y = 80;
      tft.fillScreen(ST77XX_BLACK);
    }

    if(!digitalRead(4))
    {
      if(selec < 173 && strcmp(jogador.ID.nome, "\0"))
      {
        tft.fillScreen(ST77XX_BLACK);
        jogo = 1;
      }
      else if (selec < 173 && !strcmp(jogador.ID.nome, "\0"))
      {
        tft.fillScreen(ST77XX_BLACK);
        tft.drawRect(1, 1, tft.width()-2, tft.height()-2, ST77XX_WHITE);
        tft.setTextSize(2);
        tft.setCursor(20, tft.height()/2);
        tft.print("Jogador Invalido!");
        delay(2000);
        jogo = 0;
        tft.fillScreen(ST77XX_BLACK);
      }
      else
      {
        tft.fillScreen(ST77XX_BLACK);
        jogo = 2;
      }
    }
    
    if(!digitalRead(5))
    {
      tft.fillScreen(ST77XX_BLACK);
      break;
    }
  } while(1);
}

void Inserir()
{
  int i;
  for (i = 0; i<3; i++)
  {
    rank aux;
    if (jogador.ID.pontos > players[i].pontos) //Compara pontuação do jogador com as do ranking
    {
      aux = players[i];
      players[i] = jogador.ID;
      jogador.ID = aux;
    }
  }
}

int Jogo()
{
  unsigned long t_ini = millis()/1000;
  enemy inimigo = {0, 20, 1, 4, 0, 0, 5, ST77XX_GREEN, 0, 0};
  enemy chefe = {(tft.width()/2)-(chefe_w/2), 25, 5, 6, 0, 0, 5, ST77XX_GREEN, 0, 0};
  int nivel = 1, tipo_tiro, i;
  tft.setTextColor(ST77XX_WHITE);
  tft.setCursor(5, 0);
  tft.print("Nvl:");
  tft.setCursor(75, 0);
  tft.print("Vidas:");
  tft.setCursor(165, 0);
  tft.print("Pts:");
      
  while(1)
  {
    tft.drawRect(1, 20, tft.width()-2, tft.height()-22, ST77XX_WHITE);
    unsigned long tempo = millis()/1000;
    tft.setCursor(55, 0);
    tft.print(nivel);
    tft.setCursor(145, 0);
    tft.print(jogador.vidas);
    tft.setCursor(212, 0);
    tft.print(jogador.ID.pontos);

    //DESENHA JOGADOR
    tft.drawBitmap(jogador.pos_x, jogador.pos_y, nave_bit, nave_w, nave_h, ST77XX_WHITE);

    //VERIFICA SE TEM TIROS DO JOGADOR
    if(!digitalRead(4))
    {
      if(!jogador.tiro)
      {
        jogador.tpos_x = jogador.pos_x+(nave_w/2);
        jogador.tiro = 1;
      }
    }

    //DESENHA TIROS DO JOGADOR
    if(jogador.tiro)
    {
      tft.drawLine(jogador.tpos_x, jogador.tpos_y, jogador.tpos_x, jogador.tpos_y-8, ST77XX_BLACK);
      jogador.tpos_y -= 10;
      tft.drawLine(jogador.tpos_x, jogador.tpos_y, jogador.tpos_x, jogador.tpos_y-8, ST77XX_WHITE);

       //APAGA OS TIROS DO JOGADOR SE SAIR DA TELA
      if(jogador.tpos_y-8 < 20)
      {
        tft.drawLine(jogador.tpos_x, jogador.tpos_y, jogador.tpos_x, jogador.tpos_y-8, ST77XX_BLACK);
        jogador.tiro = 0;
        jogador.tpos_y = jogador.pos_y;
      }
    }
    
    //VERIFICA SE DEVEM APARECEER INIMIGOS
    if(!inimigo.exist && !chefe.exist)
    {
      inimigo.pos_x = random(1,240-inimigo_w);
      inimigo.exist = 1;
    }

    //DESENHA INIMIGOS
    if(inimigo.exist)
    {
      //VERIFICA SE O TIRO ACERTA O INIMIGO
      if(jogador.tpos_y < inimigo.pos_y+inimigo_h && (jogador.tpos_x > inimigo.pos_x && jogador.tpos_x < inimigo.pos_x+inimigo_w))
      {
        inimigo.vidas -= 1;
        jogador.tiro = 0;
        tft.drawLine(jogador.tpos_x, jogador.tpos_y, jogador.tpos_x, jogador.tpos_y-8, ST77XX_BLACK);
        jogador.tpos_y = jogador.pos_y;
      }
      
      tft.drawBitmap(inimigo.pos_x, inimigo.pos_y, inimigo_bit, inimigo_w, inimigo_h, ST77XX_BLACK);
      inimigo.pos_y += inimigo.vel;
      tft.drawBitmap(inimigo.pos_x, inimigo.pos_y, inimigo_bit, inimigo_w, inimigo_h, inimigo.cor);    

      //APAGA O INIMIGO SE SAIR DA TELA
      if(inimigo.pos_y+inimigo_h > tft.height()-1)
      {
        tft.drawBitmap(inimigo.pos_x, inimigo.pos_y, inimigo_bit, inimigo_w, inimigo_h, ST77XX_BLACK);
        inimigo.exist = 0;
        inimigo.pos_y = 20;
        inimigo.vidas = nivel;
      }

      //VERIFICA SE TEM TIROS DE INIMIGOS
      if(!inimigo.tiro)
      {
        inimigo.tpos_x = inimigo.pos_x+(inimigo_w/2);
        inimigo.tpos_y = inimigo.pos_y+inimigo_h+2;
        inimigo.tiro = 1;
      }

      //VERIFICA SE O INIMIGO ACERTA O JOGADOR
      if(inimigo.exist && inimigo.pos_y+inimigo_h > jogador.pos_y && (inimigo.pos_x+inimigo_w > jogador.pos_x && inimigo.pos_x < jogador.pos_x+nave_w))
      {
        tft.setTextColor(ST77XX_BLACK);
        tft.setCursor(145, 0);
        tft.print(jogador.vidas);
        tft.setTextColor(ST77XX_WHITE);
        jogador.vidas -= 1;
        inimigo.vidas -= 1;
        
        if(inimigo.vidas == 0)
          jogador.ID.pontos -= 5*nivel;
      }

      //VERIFICA SE O INIMIGO MORREU
      if(inimigo.vidas <= 0)
      {
        tft.setTextColor(ST77XX_BLACK);
        tft.setCursor(212, 0);
        tft.print(jogador.ID.pontos);
        tft.setTextColor(ST77XX_WHITE);
        jogador.ID.pontos += 5*nivel;
        inimigo.exist = 0;
        tft.drawBitmap(inimigo.pos_x, inimigo.pos_y, inimigo_bit, inimigo_w, inimigo_h, ST77XX_BLACK);
        inimigo.pos_y = 20;
        inimigo.vidas = nivel;
      }
    }

    //DESENHA TIROS DE INIMIGOS
    if(inimigo.tiro)
    {
      tft.fillCircle(inimigo.tpos_x, inimigo.tpos_y, 2, ST77XX_BLACK);
      inimigo.tpos_y += inimigo.tvel;
      tft.fillCircle(inimigo.tpos_x, inimigo.tpos_y, 2, inimigo.cor);    
      
      //APAGA OS TIROS DE INIMIGOS SE SAIR DA TELA
      if(inimigo.tpos_y+2 > tft.height()-1)
      {
        tft.fillCircle(inimigo.tpos_x, inimigo.tpos_y, 2, ST77XX_BLACK);
        inimigo.tiro = 0;
      }

      //VERIFICA SE O TIRO ACERTA O JOGADOR
      if(inimigo.tiro && inimigo.tpos_y > jogador.pos_y && (inimigo.tpos_x > jogador.pos_x && inimigo.tpos_x < jogador.pos_x+nave_w))
      {
        tft.setTextColor(ST77XX_BLACK);
        tft.setCursor(145, 0);
        tft.print(jogador.vidas);
        tft.setTextColor(ST77XX_WHITE);
        jogador.vidas -= 1;
        inimigo.tiro = 0;
        tft.fillCircle(inimigo.tpos_x, inimigo.tpos_y, 2, ST77XX_BLACK);
      }
    }

    //DESENHA CHEFE
    if(chefe.exist)
    {
      //VERIFICA SE O TIRO ACERTA O CHEFE
      if(jogador.tpos_y < chefe.pos_y+chefe_h && (jogador.tpos_x > chefe.pos_x && jogador.tpos_x < chefe.pos_x+chefe_w))
      {
        chefe.vidas -= 1;
        jogador.tiro = 0;
        tft.drawLine(jogador.tpos_x, jogador.tpos_y, jogador.tpos_x, jogador.tpos_y-8, ST77XX_BLACK);
        jogador.tpos_y = jogador.pos_y;
      }
      
      tft.drawBitmap(chefe.pos_x, chefe.pos_y, chefe_bit, chefe_w, chefe_h, ST77XX_BLACK);
      chefe.pos_x += chefe.vel;
      tft.drawBitmap(chefe.pos_x, chefe.pos_y, chefe_bit, chefe_w, chefe_h, inimigo.cor);    

      //FAZ O CHEFE MUDAR DE DIREÇÃO SE CHEGAR NA BORDA
      if(chefe.pos_x+chefe_w >= tft.width()-1)
      {
        chefe.vel = -chefe.vel;
      }
      
      //FAZ O CHEFE MUDAR DE DIREÇÃO SE CHEGAR NA BORDA
      if(chefe.pos_x <= 1)
      {
        chefe.vel = -chefe.vel;
      }

      //VERIFICA SE TEM TIROS DO CEHFE
      if(!chefe.tiro)
      {
        chefe.tpos_x = chefe.pos_x+(chefe_w/2);
        chefe.tpos_y = chefe.pos_y+chefe_h+5;
        chefe.tiro = 1;
        tipo_tiro = random(1,4);
      }

      //VERIFICA SE O CHEFE MORREU
      if(chefe.vidas <= 0)
      {
        tft.setTextColor(ST77XX_BLACK);
        tft.setCursor(212, 0);
        tft.print(jogador.ID.pontos);
        tft.setTextColor(ST77XX_WHITE);
        jogador.ID.pontos += 30;
        
        chefe.exist = 0;
        tft.drawBitmap(chefe.pos_x, chefe.pos_y, chefe_bit, chefe_w, chefe_h, ST77XX_BLACK);
        chefe.pos_x = (tft.width()/2)-(chefe_w/2);
        chefe.vidas = 5+(3*nivel);
        chefe.vel += 1;
        chefe.tvel += 2;
        
        tft.setTextColor(ST77XX_BLACK);
        tft.setCursor(55, 0);
        tft.print(nivel);
        tft.setTextColor(ST77XX_WHITE);
        nivel += 1;
        inimigo.vidas += 1;
        inimigo.vel += 1;
        inimigo.tvel += 1;
  
        if(nivel == 2)
          inimigo.cor = ST77XX_YELLOW;
  
        if(nivel == 3)
          inimigo.cor = ST77XX_RED;
  
        t_ini = tempo;
      }
    }

    //DESENHA TIROS DO CHEFE
    if(chefe.tiro)
    {
      switch(tipo_tiro)
      {
        case 1:
          tft.fillCircle(chefe.tpos_x, chefe.tpos_y, 5, ST77XX_BLACK);
          chefe.tpos_y += chefe.tvel;
          tft.fillCircle(chefe.tpos_x, chefe.tpos_y, 5, inimigo.cor);
          break;

        case 2:
          tft.fillCircle(chefe.tpos_x, chefe.tpos_y, 5, ST77XX_BLACK);
          chefe.tpos_x -= chefe.tvel/2;
          chefe.tpos_y += abs(chefe.tvel);
          tft.fillCircle(chefe.tpos_x, chefe.tpos_y, 5, inimigo.cor);

          //FAZ O TIRO MUDAR DE DIREÇÃO SE CHEGAR NA BORDA
          if(chefe.tpos_x+5 >= tft.width()-1)
          {
            chefe.tvel = -chefe.tvel;
          }
          
          //FAZ O TIRO MUDAR DE DIREÇÃO SE CHEGAR NA BORDA
          if(chefe.tpos_x <= 1)
          {
            chefe.tvel = -chefe.tvel;
          }
          break;

        case 3:
          tft.fillCircle(chefe.tpos_x, chefe.tpos_y, 5, ST77XX_BLACK);
          chefe.tpos_x += chefe.tvel/2;
          chefe.tpos_y += abs(chefe.tvel);
          tft.fillCircle(chefe.tpos_x, chefe.tpos_y, 5, inimigo.cor);

          //FAZ O TIRO MUDAR DE DIREÇÃO SE CHEGAR NA BORDA
          if(chefe.tpos_x+5 >= tft.width()-1)
          {
            chefe.tvel = -chefe.tvel;
          }
          
          //FAZ O TIRO MUDAR DE DIREÇÃO SE CHEGAR NA BORDA
          if(chefe.tpos_x <= 1)
          {
            chefe.tvel = -chefe.tvel;
          }
          break;
      }
      
      //APAGA OS TIROS DO CHEFE SE SAIR DA TELA
      if(chefe.tpos_y+5 > tft.height()-1)
      {
        tft.fillCircle(chefe.tpos_x, chefe.tpos_y, 5, ST77XX_BLACK);
        
        if(chefe.tvel < 0)
          chefe.tvel = -chefe.tvel;
          
        chefe.tiro = 0;
      }
      
       //VERIFICA SE O TIRO ACERTA O JOGADOR
       if(chefe.tpos_y+5 > jogador.pos_y && (chefe.tpos_x+5 > jogador.pos_x && chefe.tpos_x-5 < jogador.pos_x+nave_w))
       {
          tft.setTextColor(ST77XX_BLACK);
          tft.setCursor(145, 0);
          tft.print(jogador.vidas);
          tft.setTextColor(ST77XX_WHITE);
          jogador.vidas -= 1;
          chefe.tiro = 0;
          tft.fillCircle(chefe.tpos_x, chefe.tpos_y, 5, ST77XX_BLACK);
       }
    }
    
    //BOTAO PARA ESQUERDA
    if(!digitalRead(2))
    {
      if(jogador.pos_x>1)
      {
        tft.drawBitmap(jogador.pos_x, jogador.pos_y, nave_bit, nave_w, nave_h, ST77XX_BLACK);
        jogador.pos_x -= 7;
      }
    }
    
    //BOTAO PARA DIREITA
    if(!digitalRead(3))
    {
      if(jogador.pos_x+nave_w<tft.width()-1)
      {
        tft.drawBitmap(jogador.pos_x, jogador.pos_y, nave_bit, nave_w, nave_h, ST77XX_BLACK);
        jogador.pos_x += 7;
      }
    }

    //VERIFICA QUANDO PASSA 1 MINUTO PARA PASSAR DE NIVEL E O BOSS
    if(tempo - t_ini == 30 && nivel <= 3 && !chefe.exist)
    {
      chefe.exist = 1;
    }

    if(jogador.vidas <= 0)
    {
      if(!norank)
        Inserir();
      else
      {
        for(i = 0; i<3; i++)
        {
          if(!strcmp(players[i].nome, jogador.ID.nome) && players[i].pontos < jogador.ID.pontos)
            players[i].pontos = jogador.ID.pontos;
        }
        Organizar();
      }

      return 0;
    }

    if(nivel >= 4)
    {
      if(!norank)
        Inserir();
      else
      {
        for(i = 0; i<3; i++)
        {
          if(!strcmp(players[i].nome, jogador.ID.nome) && players[i].pontos < jogador.ID.pontos)
            players[i].pontos = jogador.ID.pontos;
        }
        Organizar();
      }
        
      return 1;
    }

    if(!digitalRead(5))
      return 2;
  }
}

void drawRanking()
{
  int i, x, y=90;
  tft.drawRect(1, 1, tft.width()-2, tft.height()-2, ST77XX_WHITE);  //Faz a borda em branco com 1 pixel de distancia da beirada do display
  tft.setTextColor(ST77XX_RED);
  tft.setCursor(80, 40);
  tft.print("Ranking");
  for(i=0; i<3; i++)
  {
    x = 40;
    tft.setCursor(x, y);
    tft.print(players[i].nome);
    x += 90;
    tft.setCursor(x, y);
    tft.print(players[i].pontos);
    y += 31;
  }

  while(digitalRead(5))
  {}
  tft.fillScreen(ST77XX_BLACK);
}

void Organizar()
{
  int i;
  bool subs;
  
  do
  {
    subs = 0;
    for (i = 0; i<2 && players[i+1].pontos != 0; i++)
    {
      rank aux;
      if (players[i].pontos < players[i+1].pontos) //Compara as pontuações do ranking
      {
        aux = players[i+1];
        players[i+1] = players[i];
        players[i] = aux;
        subs = 1;
      }
    }
  } while(subs != 0);
}

void drawCreditos()
{
  int y;
  tft.drawRect(1, 1, tft.width()-2, tft.height()-2, ST77XX_WHITE);  //Faz a borda em branco com 1 pixel de distancia da beirada do display
  tft.setTextColor(ST77XX_MAGENTA);
  tft.setCursor(25, 35);
  tft.print("Desenvolvedores");
  tft.setCursor(25, 70);
  tft.println("Andre");
  y = tft.getCursorY();
  tft.setCursor(25, y);
  tft.println("\tProgramador");
  tft.setCursor(25, 110);
  tft.println("Josue");
  y = tft.getCursorY();
  tft.setCursor(25, y);
  tft.println("\tIdealizaor");
  tft.setCursor(25, 150);
  tft.println("Dani");
  y = tft.getCursorY();
  tft.setCursor(25, y);
  tft.println("\tScrum Master");
  tft.setCursor(25, 190);
  tft.println("Hamada");
  y = tft.getCursorY();
  tft.setCursor(25, y);
  tft.println("\tPatrocinador");
    
  while(digitalRead(5))
  {}
  tft.fillScreen(ST77XX_BLACK);
}

void drawSair()
{
  tft.drawRect(1, 1, tft.width()-2, tft.height()-2, ST77XX_WHITE);  //Faz a borda em branco com 1 pixel de distancia da beirada do display
  tft.setTextColor(ST77XX_YELLOW);
  tft.setCursor(50, 92);
  tft.print("Saindo...\n\n\n  Que a forca \n     esteja \n      com voce");
  delay(15000);
  tft.fillScreen(ST77XX_BLACK);
  delay(15000);
}